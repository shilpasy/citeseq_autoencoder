seq(-3, 3, 99)
seq(-3, 3, length.out=99)
install.packages("remotes")
remotes::install_github("mojaveazure/seurat-disk")
remotes::install_github("jlmelville/uwot")
BiocManager::install("GEOquery")
gse <- getGEO("GSE163005", GSEMatrix=FALSE)
library(GEOQuery)
library(GEOquery)
gse <- getGEO("GSE163005", GSEMatrix=FALSE)
Meta(gse)
phenoData(gse)
phenoData(gse[[i]])
pData(phenoData(gse[[1]]))
gse <- getGEO("GSE163005", GSEMatrix=TRUE)
pData(phenoData(gse[[1]]))
log(12+1)
library(SingleCellExperiment)
counts_matrix <- data.frame(cell_1 = rpois(10, 10),
cell_2 = rpois(10, 10),
cell_3 = rpois(10, 30))
rownames(counts_matrix) <- paste0("gene_", 1:10)
counts_matrix <- as.matrix(counts_matrix) # must be a matrix object!
sce <- SingleCellExperiment(assays = list(counts = counts_matrix))
sce
library(scater)
BiocManager::install("scater")
(scater)
library(SingleCellExperiment)
library(scater)
counts_matrix <- data.frame(cell_1 = rpois(10, 10),
cell_2 = rpois(10, 10),
cell_3 = rpois(10, 30))
rownames(counts_matrix) <- paste0("gene_", 1:10)
counts_matrix <- as.matrix(counts_matrix) # must be a matrix object!
sce <- SingleCellExperiment(assays = list(counts = counts_matrix))
sce
lib.sf <- librarySizeFactors(sce)
lib.sf
counts(sce)
sce <- scater::logNormCounts(sce)
logcounts(sce)
log(10/0.5919540)
log(10/0.5919540 + 1)
log2(10/0.5919540 + 1)
log2(13/0.5919540 + 1)
install.packages('Seurat')
install.packages("Seurat")
setwd("C:/Users/yuana/github/citeseq_autoencoder")
library(Seurat)
library(SeuratData)
library(cowplot)
library(dplyr)
library(patchwork)
cbmc.rna <- as.sparse(read.csv(file = "./data/GSE100866_CBMC_8K_13AB_10X-RNA_umi.csv.gz", sep = ",",
header = TRUE, row.names = 1))
cbmc.rna <- CollapseSpeciesExpressionMatrix(cbmc.rna)
cbmc.adt <- as.sparse(read.csv(file = "../data/GSE100866_CBMC_8K_13AB_10X-ADT_umi.csv.gz", sep = ",",
header = TRUE, row.names = 1))
all.equal(colnames(cbmc.rna), colnames(cbmc.adt))
seu <- CreateSeuratObject(counts = cbmc.rna)
seu[["ADT"]] <-  CreateAssayObject(counts = cbmc.adt)
DefaultAssay(seu) <- 'RNA'
seu <- NormalizeData(seu) %>% FindVariableFeatures() %>% ScaleData() %>% RunPCA(verbose=FALSE)
seu <- FindNeighbors(seu, dims = 1:30)
seu <- FindClusters(seu, resolution = 0.8, verbose = FALSE)
seu <- RunUMAP(seu, dims = 1:30)
DimPlot(cbmc, label = TRUE)
